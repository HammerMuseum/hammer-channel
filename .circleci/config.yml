
# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
## Defines images and working directory.
defaults: &defaults
  docker:
    - image: circleci/php:7.4-buster-node-browsers-legacy
      environment:
        HOST_URL: channel.hammer.ucla.edu
        PROD_DEPLOY_URL: video.hammer.cogapp.com
        STAGE_HOST_URL: stage.video.hammer.cogapp.com
        DEV_HOST_URL: dev.video.hammer.cogapp.com

# Defines the cache restore mechanism for composer dependencies.
restore_cache: &restore_cache
  # We use the composer.lock as a way to determine if we can cache our build.
  keys:
  - composer-v2-{{ checksum "composer.lock" }}
  # fallback to using the latest cache if no exact match is found
  - composer-v2

# Defines the cache saving mechanism for composer dependencies.
save_cache: &save_cache
  key: composer-v2-{{ checksum "composer.lock" }}
  paths:
    - vendor

# Defines the cache restore mechanism for node dependencies.
restore_node_cache: &restore_node_cache
  keys:
    - node-v1-{{ checksum "package.json" }}
    - node-v1-

# Defines the cache saving mechanism for node dependencies.
save_node_cache: &save_node_cache
  key: node-v1-{{ checksum "package.json" }}
  paths:
    - node_modules
    - /home/circleci/.npm

# Jobs
build_and_test: &build_and_test
  <<: *defaults
  steps:
    - checkout
    - run:
        name: Install missing packages
        command: |
          sudo apt-get update
          sudo apt-get install -y libnss3 chromium automake

    # Install Composer dependencies.
    - restore_cache: *restore_cache
    - run: composer install -n -q
    - save_cache: *save_cache

    # Install Node dependencies.
    - restore_cache: *restore_node_cache
    - run: npm install
    - save_cache: *save_node_cache

    - run:
        name: Setup any environment vars required for the build
        command: |
          if [[ -z "${CIRCLE_BRANCH}" ]]; then
            .circleci/scripts/add_env_vars_to_build.sh tagged
          else
            .circleci/scripts/add_env_vars_to_build.sh $CIRCLE_BRANCH
          fi

    - run:
        name: Run frontend test suites
        command: npm run test

    - run:
        name: Create production frontend build
        command: npm run production

    # prepare database
    - run: touch storage/testing.sqlite
    - run: php artisan key:generate --env=testing
    - run: php artisan migrate --env=testing --database=sqlite_testing --force

    # Run tests
    - run: ./vendor/bin/phpunit

    # Run linting
    - run: ./vendor/bin/phpcs

    - run: cp -rf .env.dusk.testing .env
    - run: php artisan key:generate

    - run:
        name: Run Laravel Server
        command: php artisan serve
        background: true

    - run:
        name: Run Laravel Dusk Tests
        command: |
          php artisan dusk:chrome-driver
          php artisan dusk

    - persist_to_workspace:
        root: /home/circleci/project
        paths:
          - vendor/
          - public/css/
          - public/js/
          - public/fonts/
          - public/images/
          - public/icons/
          - public/mix-manifest.json

deploy: &deploy
  <<: *defaults
  steps:
    - checkout
    - add_ssh_keys:
        fingerprints:
          - "a2:22:da:24:fd:c3:76:8d:80:de:ae:af:a3:00:c3:3e"
    - attach_workspace:
        at: /home/circleci/project
    - run:
        name: Install deploy dependency rsync
        command: |
          sudo apt-get update
          sudo apt-get install rsync
    - run:
        name: Run Composer with production settings.
        command: composer install --optimize-autoloader --no-dev
    - aws-cli/setup
    - aws-white-list-circleci-ip/add:
        port: 22
        tag-key: group
        tag-value: bastion
    - run:
        name: Add host to known hosts
        command: ssh-keyscan -H $(echo "$PROD_DEPLOY_URL" | sed 's/.*@\(.*\):.*/\1/') >> ~/.ssh/known_hosts
    - run:
        name: Deploy to $PROD_DEPLOY_URL
        command: php artisan deploy $PROD_DEPLOY_URL
    - run: ssh deploy@$PROD_DEPLOY_URL sudo systemctl reload php7.4-fpm.service
    - aws-white-list-circleci-ip/remove:
        port: 22
        tag-key: group
        tag-value: bastion

deploy_stage: &deploy_stage
  <<: *defaults
  steps:
    - checkout
    - attach_workspace:
        at: /home/circleci/project
    - run:
        name: Install deploy dependency rsync
        command: |
          sudo apt-get update
          sudo apt-get install rsync
    - run:
        name: Run Composer with production settings.
        command: composer install --optimize-autoloader --no-dev
    - aws-cli/setup
    - aws-white-list-circleci-ip/add:
        port: 22
        tag-key: group
        tag-value: bastion
    - add_ssh_keys:
        fingerprints:
          - "a2:22:da:24:fd:c3:76:8d:80:de:ae:af:a3:00:c3:3e"
    - run:
        name: Add staging host to known hosts
        command: ssh-keyscan -H $(echo "$STAGE_HOST_URL" | sed 's/.*@\(.*\):.*/\1/') >> ~/.ssh/known_hosts
    - run:
        name: Deploy to $STAGE_HOST_URL
        command: php artisan deploy $STAGE_HOST_URL
    - run: ssh deploy@$STAGE_HOST_URL sudo systemctl reload php7.4-fpm.service
    - aws-white-list-circleci-ip/remove:
        port: 22
        tag-key: group
        tag-value: bastion

deploy_dev: &deploy_dev
  <<: *defaults
  steps:
    - checkout
    - add_ssh_keys:
        fingerprints:
          - "a2:22:da:24:fd:c3:76:8d:80:de:ae:af:a3:00:c3:3e"
    - attach_workspace:
        at: /home/circleci/project
    - run:
        name: Install deploy dependency rsync
        command: sudo apt install rsync
    - run: composer install --optimize-autoloader --no-dev
    - aws-cli/setup
    - aws-white-list-circleci-ip/add:
        port: 22
        tag-key: group
        tag-value: bastion
    - run: ssh-keyscan -H $(echo "$DEV_HOST_URL" | sed 's/.*@\(.*\):.*/\1/') >> ~/.ssh/known_hosts
    - run: php artisan deploy $DEV_HOST_URL
    - run: ssh deploy@$DEV_HOST_URL sudo systemctl reload php7.4-fpm.service
    - aws-white-list-circleci-ip/remove:
        port: 22
        tag-key: group
        tag-value: bastion

# Declare all of the jobs we should run.
version: 2.1
orbs:
  aws-cli: circleci/aws-cli@0.1.18
  aws-white-list-circleci-ip: avvo/aws-white-list-circleci-ip@0.0.2
  shellcheck: circleci/shellcheck@1.3.15

jobs:
  build_and_test:
     <<: *build_and_test
  deploy_dev:
    <<: *deploy_dev
  deploy_stage:
     <<: *deploy_stage
  deploy:
     <<: *deploy

workflows:
  build_and_test:
    jobs:
      - shellcheck/check:
          filters:
              tags:
                only: /.*/
      - build_and_test:
          requires:
            - shellcheck/check
          filters:
            tags:
              only: /.*/
      - deploy_dev:
          requires:
            - build_and_test
          filters:
            tags:
              only: /^dev-.*/
            branches:
              ignore: /.*/
      - deploy_stage:
          requires:
            - build_and_test
          filters:
            tags:
              only: /^stage-.*/
            branches:
              only: develop
      - deploy:
          requires:
            - build_and_test
          filters:
            branches:
              only: master
