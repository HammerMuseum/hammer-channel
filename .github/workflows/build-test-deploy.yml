name: Build, Test, Deploy
on:
  push:
  pull_request:
    branches: [master, develop]

env:
  PHP_VERSION: '8.3'
  NODE_VERSION: '22'

jobs:
  build_and_test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup PHP and install Composer dependencies
      uses: ./.github/actions/setup-php-environment
      with:
        php-version: ${{ env.PHP_VERSION }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install Chrome
      uses: browser-actions/setup-chrome@v1
      with:
        chrome-version: 120
        install-chromedriver: true

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install Node dependencies
      run: npm install

    - name: Set environment variables
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
          echo "MIX_DATASTORE_URL=https://datastore.hammer.ucla.edu/api/" >> $GITHUB_ENV
          echo "MIX_GTM_ID=GTM-TN3WHM" >> $GITHUB_ENV
          echo "MIX_PROD=true" >> $GITHUB_ENV
        elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
          echo "MIX_DATASTORE_URL=https://stage.datastore.hammer.cogapp.com/api/" >> $GITHUB_ENV
          echo "MIX_PROD=false" >> $GITHUB_ENV
        else
          echo "MIX_DATASTORE_URL=https://dev.datastore.hammer.cogapp.com/api/" >> $GITHUB_ENV
          echo "MIX_PROD=false" >> $GITHUB_ENV
        fi

    - name: Run frontend tests
      run: npm run test

    - name: Create production frontend build
      run: npm run production

    - name: Prepare database
      run: |
        touch storage/testing.sqlite
        php artisan key:generate --env=testing
        php artisan migrate --env=testing --database=sqlite_testing --force

    - name: Run PHPUnit tests
      run: ./vendor/bin/phpunit

    - name: Run PHP CodeSniffer
      run: ./vendor/bin/phpcs

    - name: Prepare Dusk Environment
      run: |
        cp .env.dusk.testing .env
        php artisan key:generate

    - name: Start Laravel Server
      run: php artisan serve &

    - name: Run Dusk Tests
      run: |
        php artisan dusk:chrome-driver --detect
        php artisan dusk

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-assets
        path: |
          public/css
          public/js
          public/fonts
          public/images
          public/icons
          public/mix-manifest.json
          vendor

  deploy_dev:
    needs: build_and_test
    if: startsWith(github.ref, 'refs/tags/dev-')
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts

    - name: Deploy to dev
      uses: ./.github/actions/deploy
      with:
        php-version: ${{ env.PHP_VERSION }}
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
        known-hosts: ssh-keyscan -H $(echo "${{ secrets.DEV_DEPLOY_URL }}" | sed 's/.*@\(.*\):.*/\1/')
        deploy-env: 'dev'
        host-url: ${{ secrets.DEV_DEPLOY_URL }}
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        aws-security-group-id: ${{ secrets.AWS_SECURITY_GROUP_ID }}

  deploy_staging:
    needs: build_and_test
    if: github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/tags/staging-')
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts

    - name: Create harvester env file
      run: |
        rm -f harvester/.env
        touch harvester/.env
        echo -e "AB_CLIENT_ID=${{ secrets.AB_CLIENT_ID }}" >> harvester/.env
        echo -e "AB_CLIENT_SECRET=${{ secrets.AB_CLIENT_SECRET }}" >> harvester/.env
        echo -e "AB_USERNAME=${{ secrets.AB_USERNAME }}" >> harvester/.env
        echo -e "AB_PASSWORD=${{ secrets.AB_PASSWORD }}" >> harvester/.env
        echo -e "TRINT_API_KEY=${{ secrets.TRINT_API_KEY }}\n" >> harvester/.env
        echo -e "ELASTICSEARCH_HOST=${{ secrets.ELASTICSEARCH_HOST }}\n" >> harvester/.env
        echo -e "ELASTICSEARCH_API_KEY=${{ secrets.ELASTICSEARCH_API_KEY }}\n" >> harvester/.env
        echo -e "SLACK_WEBHOOK=${{ secrets.SLACK_WEBHOOK }}\n" >> harvester/.env

    - name: Deploy to staging
      uses: ./.github/actions/deploy-app
      with:
        php-version: ${{ env.PHP_VERSION }}
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
        known-hosts: ssh-keyscan -H $(echo "${{ secrets.STAGING_DEPLOY_URL }}" | sed 's/.*@\(.*\):.*/\1/')
        deploy-env: 'staging'
        host-url: ${{ secrets.STAGING_DEPLOY_URL }}
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        aws-security-group-id: ${{ secrets.AWS_SECURITY_GROUP_ID }}

  deploy_prod:
    needs: build_and_test
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts

    - name: Create harvester env file
      run: |
        rm -f harvester/.env
        touch harvester/.env
        echo -e "AB_CLIENT_ID=${{ secrets.AB_CLIENT_ID }}" >> harvester/.env
        echo -e "AB_CLIENT_SECRET=${{ secrets.AB_CLIENT_SECRET }}" >> harvester/.env
        echo -e "AB_USERNAME=${{ secrets.AB_USERNAME }}" >> harvester/.env
        echo -e "AB_PASSWORD=${{ secrets.AB_PASSWORD }}" >> harvester/.env
        echo -e "TRINT_API_KEY=${{ secrets.TRINT_API_KEY }}\n" >> harvester/.env
        echo -e "ELASTICSEARCH_HOST=${{ secrets.ELASTICSEARCH_HOST }}\n" >> harvester/.env
        echo -e "ELASTICSEARCH_API_KEY=${{ secrets.ELASTICSEARCH_API_KEY }}\n" >> harvester/.env
        echo -e "SLACK_WEBHOOK=${{ secrets.SLACK_WEBHOOK }}\n" >> harvester/.env

    - name: Deploy to production
      uses: ./.github/actions/deploy-app
      with:
        php-version: ${{ env.PHP_VERSION }}
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
        known-hosts: ssh-keyscan -H $(echo "${{ secrets.PROD_DEPLOY_URL }}" | sed 's/.*@\(.*\):.*/\1/')
        deploy-env: 'prod'
        host-url: ${{ secrets.PROD_DEPLOY_URL }}
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        aws-security-group-id: ${{ secrets.AWS_SECURITY_GROUP_ID }}
